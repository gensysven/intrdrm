name: Health Monitor

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch: # Allow manual triggers

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
          SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
          EOF

      - name: Run health check
        id: health
        run: |
          npm run health-check || echo "health_status=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Create issue on critical failure
        if: steps.health.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'ðŸš¨ Health Check Failed: Critical Issues Detected';
            const body = `
            ## Critical Health Issues Detected

            The automated health check has detected critical issues that require immediate attention.

            **Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Time**: ${{ github.event.repository.updated_at }}

            ### Possible Issues:
            - Pool size critically low (<50 connections)
            - No generation in >48 hours
            - Concept pool >80% utilized
            - Database connectivity issues

            ### Actions Required:
            1. Check the workflow logs for specific issues
            2. Run emergency generation if pool is low
            3. Expand concept pool if utilization is high
            4. Verify database and API credentials

            This issue will be automatically closed when health checks pass.
            `;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'health-check,critical'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['health-check', 'critical', 'automated']
              });
            }

      - name: Close resolved issues
        if: steps.health.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'health-check,critical'
            });

            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: 'âœ… Health checks are now passing. Auto-closing this issue.'
              });

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }
